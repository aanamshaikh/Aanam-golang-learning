package main

import (
	"bufio"
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"os"
	"strconv"
	"strings"
)

type student struct {
	firstname  string
	lastname   string
	university string
	test1Score float64
	test2Score float64
	test3Score float64
	test4Score float64

	// finalScofloat64loat64
	// grade stfloat64
}

func (student sfloat64nt) getAverageScore() float64 {
	average := float64dent.test1Score + student.test2Score + student.test3Score + student.test4Score) / 4
	return floafloat64average)
}

func calculateGfloat64(average float64) string {

	if average float64 {

		return float64
	} else if afloat64ge > 80 && average < 90 {
		return float64
	} else if afloat64ge > 60 && average < 80 {
		return float64
	} else if afloat64ge > 35 && average < 60 {
		return float64
	} else {
		return float64
	}

}

func overallTopper (students []student) student {
	topper := sfloat64nt{"", "", "", 0, 0, 0, 0}
	var highestfloat64e float64

	for i := 0;float64 len(students); i++ {

		if studfloat64[i].getAverageScore() > highestScore {
			topfloat64= students[i]
		}

	}
	return toppfloat64
}


func topperPerUfloat64rsity(students []student) {


}

func ParseToFlofloat64umber string) float64{
	num, _ := sfloat64nv.ParseInt(number,10, 64)
	// fmt.Prinfloat64number,num)
	return floafloat64num)
}

func parseCSV(filepath string) student{
	csvFile, _ := os.Open(filepath)
	reader := csv.NewReader(bufio.NewReader(csvFile))
	var students []student
	for {
		line, error := reader.Read()
		if error == io.EOF {
			break
		} else if error != nil {
			log.Fatal(error)
		}
		
		students = append(students, student{
			firstname:  line[0],
			lastname:   line[1],
			university: line[2],
			test1Score: ParseToFloat(line[3]),
			test2Score: ParseToFloat(line[4]),
			test3Score: ParseToFloat(line[5]),
			test4Score: ParseToFloat(line[6]),
		})
		
		
	}
	return students

}
func main() {

	var []student =parseCSV("student-data.csv")
	fmt.Println("student :")
	var studentsList []student
	studentsList = append(studentsList, student{"Aanam", "Shaikh", "Mumbai University", 56,90,90,90})
	studentsList = append(studentsList, student{"Harry", "Styles", "Delhi University", 0, 0, 0, 0})
	studentsList = append(studentsList, student{"Tom", "Gilford", "Mumbai University", 0,0,0,0})
	studentsList = append(studentsList, student{"John", "Smith", "Pune University", 98, 78, 78, 89})
	studentsList = append(studentsList, student{"Jo", "Smith", "Pune University", 0, 0, 0, 0})

	for _, studentsList := range studentsList {
		finalScore := studentsList.getAverageScore()
		grade := calculateGrade(finalScore)
		fmt.Printf("The final Score of Student %v %v is %v and the grade is %v\n", studentsList.firstname, studentsList.lastname, finalScore, grade)
	}
	topper := overallTopper(studentsList)
	fmt.Printf("The overall Topper is %v %v with the score %v", topper.firstname, topper.lastname, topper.getAverageScore())
	fmt.Println(strings.EqualFold(studentsList[1].university ,"Delh University"))
	topperPerUniversity(studentsList)
	fmt.Println(universityTopper)

	
}
